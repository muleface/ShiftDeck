using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using WebAPI.Models;

namespace WebAPI.Controllers
{
    [Route("api/[controller]")] //means that each query's initial URL is serverURL:port/api/interns
    [ApiController]
    public class StationsController : ControllerBase
    {
        private readonly ApplicationContext _context;

        public StationsController(ApplicationContext context)
        {
            _context = context;
        }

        //GET: api/stations
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Station>>> GetAllStations() 
        {
            var stations = await _context.StationsTable.ToListAsync<Station>();

            if (stations == null)
            {
                return BadRequest("No stations found in database.");
            }

            return stations;
        }

        //GET: api/stations/getstationbyname/{name}
        [HttpGet("GetStationByName/{name}")]
        public async Task<ActionResult<Station>> GetStationByName (string name) 
        {
            var station = await _context.StationsTable.FirstOrDefaultAsync(st => st.StationName == name);
            
            if (station == null)
            {
                return BadRequest($"Station {name} not found in database.");
            }   

            return station;

        }

        //GET: api/stations/getstationbynum/{number}
        [HttpGet("GetStationByNum/{num}")]
        public async Task<ActionResult<Station>> GetStationByNum (int num)
        {
            var station = await _context.StationsTable.FindAsync(num);

            if (station == null)
            {
                return BadRequest($"Station {num} not found in database.");
            }

            return station;
        }

        //POST: api/stations
        [HttpPost()]
        public async Task<ActionResult<Station>> AddStation (string name)
        {
            if (name == null)
            {
                return BadRequest($"Station name required.");
            }

            if (await _context.StationsTable.FirstOrDefaultAsync<Station>(st => st.StationName == name) != null)
            {
                return BadRequest($"Station {name} already exists");
            }

            Station station = new Station{StationName = name}; //stationNum is automatically generated by the sql database thanks to the auto increment config.
            _context.StationsTable.Add(station);
            await _context.SaveChangesAsync();

           return Created($"/api/stations/{station.StationNum}", station);

        }

        //DELETE: api/stations/{name}
        [HttpDelete("{name}")]
        public async Task<ActionResult<Station>> DeleteStation (string name)
        {
            var station = await _context.StationsTable.FirstOrDefaultAsync(st => st.StationName == name);

            if (station == null)
            {
                return BadRequest($"Station {name} doesn't exist.");
            }
            
            _context.StationsTable.Remove(station);
            await _context.SaveChangesAsync();

            return Ok(station);
        }
    }
}
